openapi: 3.0.3
info:
  title: HabitatTrack Financial Management API
  version: v1.0.0
  description: API for managing properties, financial transactions, and categories.
  contact:
    name: API Support
    url: http://www.example.com/support
    email: support@example.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html

servers:
  - url: http://localhost:8080
    description: Development server
  - url: https://api.habitattrack.com
    description: Production server

components:
  schemas:
    Property:
      type: object
      required:
        - name
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the property.
          readOnly: true
        name:
          type: string
          description: Name of the property (e.g., "123 Main St Apt 4B").
          example: "Sunrise Apartments Unit 101"
        address:
          type: string
          description: Full address of the property.
          nullable: true
          example: "123 Main St, Anytown, USA 12345"
        # Add other existing property fields if necessary, or keep it minimal as requested
        created_at:
          type: string
          format: date-time
          description: Timestamp of when the property was created.
          readOnly: true
        updated_at:
          type: string
          format: date-time
          description: Timestamp of when the property was last updated.
          readOnly: true

    PropertyCreateRequest:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          description: Name of the property.
        address:
          type: string
          nullable: true
          description: Full address of the property.

    PropertyUpdateRequest:
      type: object
      properties:
        name:
          type: string
          description: Name of the property.
        address:
          type: string
          nullable: true
          description: Full address of the property.

    TransactionCategory:
      type: object
      required:
        - name
        - classification
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the transaction category.
          readOnly: true
        name:
          type: string
          description: Name of the transaction category (e.g., "Rent Received", "Insurance Premium").
          example: "Utility Bill"
        classification:
          type: string
          enum: [income, expense]
          description: Classification of the category.
          example: "expense"
        created_at:
          type: string
          format: date-time
          description: Timestamp of when the category was created.
          readOnly: true
        updated_at:
          type: string
          format: date-time
          description: Timestamp of when the category was last updated.
          readOnly: true

    TransactionCategoryCreateRequest:
      type: object
      required:
        - name
        - classification
      properties:
        name:
          type: string
          description: Name of the transaction category.
        classification:
          type: string
          enum: [income, expense]
          description: Classification of the category.

    TransactionCategoryUpdateRequest:
      type: object
      properties:
        name:
          type: string
          description: Name of the transaction category.
        classification:
          type: string
          enum: [income, expense]
          description: Classification of the category.

    Transaction:
      type: object
      required:
        - amount
        - transactionDate
        - type
        - categoryId
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the transaction.
          readOnly: true
        amount:
          type: number
          format: float # Assuming monetary value, adjust if integer cents
          description: The monetary value of the transaction (always positive).
          example: 150.75
          minimum: 0.01
        transactionDate: # Changed from transaction_date
          type: string
          format: date-time # Changed from date to date-time as per ISO 8601
          description: Date and time of the transaction (ISO 8601).
          example: "2024-07-28T10:30:00Z"
        description:
          type: string
          nullable: true
          description: Optional description for the transaction.
          example: "Monthly electricity bill"
        type:
          type: string
          enum: [income, expense]
          description: Type of the transaction.
          example: "expense"
        categoryId: # Changed from income_type_id/expense_type_id
          type: string
          format: uuid
          description: Identifier of the linked transaction category.
          example: "d290f1ee-6c54-4b01-90e6-d701748f0851"
        propertyId: # Changed from property_id
          type: string
          format: uuid
          nullable: true
          description: Optional identifier of the linked property.
          example: "72f9b3f0-770a-4cb8-8183-9f4765e851cf"
        created_at:
          type: string
          format: date-time
          description: Timestamp of when the transaction was created.
          readOnly: true
        updated_at:
          type: string
          format: date-time
          description: Timestamp of when the transaction was last updated.
          readOnly: true

    TransactionCreateRequest:
      type: object
      required:
        - amount
        - transactionDate
        - type
        - categoryId
      properties:
        amount:
          type: number
          format: float
          minimum: 0.01
        transactionDate:
          type: string
          format: date-time
        description:
          type: string
          nullable: true
        type:
          type: string
          enum: [income, expense]
        categoryId:
          type: string
          format: uuid
        propertyId:
          type: string
          format: uuid
          nullable: true

    TransactionUpdateRequest: # For PUT (replace) and PATCH (partial update)
      type: object
      properties: # All fields are optional for PATCH, some might be required for PUT depending on strategy
        amount:
          type: number
          format: float
          minimum: 0.01
        transactionDate:
          type: string
          format: date-time
        description:
          type: string
          nullable: true
        type:
          type: string
          enum: [income, expense]
        categoryId:
          type: string
          format: uuid
        propertyId:
          type: string
          format: uuid
          nullable: true

    ErrorResponse:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: string
          description: An application-specific error code.
          example: "VALIDATION_ERROR"
        message:
          type: string
          description: A human-readable message providing more details about the error.
          example: "The 'name' field is required."
        details:
          type: object
          additionalProperties:
            type: string
          description: Optional field for providing more specific error details, e.g., field-level validation errors.
          example:
            field: "name"
            issue: "cannot be empty"

    PaginationInfo:
      type: object
      properties:
        totalItems:
          type: integer
          format: int64
          description: Total number of items available.
        totalPages:
          type: integer
          format: int32
          description: Total number of pages.
        currentPage:
          type: integer
          format: int32
          description: The current page number.
        pageSize:
          type: integer
          format: int32
          description: Number of items per page.
        nextCursor:
          type: string
          nullable: true
          description: Cursor for fetching the next page (for cursor-based pagination).
        prevCursor:
          type: string
          nullable: true
          description: Cursor for fetching the previous page (for cursor-based pagination).

    PaginatedTransactionsResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Transaction'
        pagination:
          $ref: '#/components/schemas/PaginationInfo'

    PaginatedCategoriesResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/TransactionCategory'
        pagination:
          $ref: '#/components/schemas/PaginationInfo'

    PaginatedPropertiesResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Property'
        pagination:
          $ref: '#/components/schemas/PaginationInfo'

  parameters:
    TransactionID:
      name: transactionId
      in: path
      required: true
      description: Identifier of the transaction.
      schema:
        type: string
        format: uuid
    CategoryID:
      name: categoryId
      in: path
      required: true
      description: Identifier of the transaction category.
      schema:
        type: string
        format: uuid
    PropertyID:
      name: propertyId
      in: path
      required: true
      description: Identifier of the property.
      schema:
        type: string
        format: uuid
    # Pagination Parameters (Offset/Limit example)
    PageLimit:
      name: limit
      in: query
      description: Maximum number of items to return per page.
      required: false
      schema:
        type: integer
        format: int32
        default: 20
        minimum: 1
        maximum: 100
    PageOffset:
      name: offset
      in: query
      description: Number of items to skip before starting to collect the result set.
      required: false
      schema:
        type: integer
        format: int32
        default: 0
        minimum: 0
    # Pagination Parameters (Cursor-based example)
    Cursor:
      name: cursor
      in: query
      description: Cursor for pagination.
      required: false
      schema:
        type: string
    # Filtering Parameters for Transactions
    DateRangeStart:
      name: startDate
      in: query
      description: Start date for filtering transactions (ISO 8601 date-time).
      required: false
      schema:
        type: string
        format: date-time
    DateRangeEnd:
      name: endDate
      in: query
      description: End date for filtering transactions (ISO 8601 date-time).
      required: false
      schema:
        type: string
        format: date-time
    TransactionTypeFilter:
      name: type
      in: query
      description: Filter transactions by type.
      required: false
      schema:
        type: string
        enum: [income, expense]
    TransactionCategoryFilter:
      name: categoryId
      in: query
      description: Filter transactions by category ID.
      required: false
      schema:
        type: string
        format: uuid
    TransactionPropertyFilter:
      name: propertyId
      in: query
      description: Filter transactions by property ID.
      required: false
      schema:
        type: string
        format: uuid

  securitySchemes:
    OAuth2BearerAuth:
      type: oauth2
      description: OAuth 2.0 Bearer Token for API authentication.
      flows:
        implicit: # Or clientCredentials, authorizationCode, password depending on your auth strategy
          authorizationUrl: https://auth.habitattrack.com/oauth2/authorize
          scopes:
            read:transactions: Grants read access to transactions
            write:transactions: Grants write access to transactions
            read:categories: Grants read access to categories
            write:categories: Grants write access to categories
            read:properties: Grants read access to properties
            write:properties: Grants write access to properties
# Global security requirement (can be overridden at operation level)
security:
  - OAuth2BearerAuth: [] # Empty array means no specific scopes required globally, define per operation if needed

paths:
  /transactions:
    summary: Manage financial transactions.
    get:
      summary: List all transactions with filtering and pagination
      tags: [Transactions]
      operationId: listTransactions
      parameters:
        - $ref: '#/components/parameters/DateRangeStart'
        - $ref: '#/components/parameters/DateRangeEnd'
        - $ref: '#/components/parameters/TransactionTypeFilter'
        - $ref: '#/components/parameters/TransactionCategoryFilter'
        - $ref: '#/components/parameters/TransactionPropertyFilter'
        - $ref: '#/components/parameters/PageLimit' # For offset/limit pagination
        - $ref: '#/components/parameters/PageOffset' # For offset/limit pagination
        # - $ref: '#/components/parameters/Cursor' # Uncomment for cursor-based pagination
      responses:
        '200':
          description: A paginated list of transactions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedTransactionsResponse'
        '400':
          description: Invalid filter parameters.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        default:
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - OAuth2BearerAuth: [read:transactions]
    post:
      summary: Create a new transaction
      tags: [Transactions]
      operationId: createTransaction
      requestBody:
        description: Transaction object to be created.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransactionCreateRequest'
      responses:
        '201':
          description: Transaction created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'
          headers:
            Location:
              description: URL of the newly created transaction.
              schema:
                type: string
                format: url
        '400':
          description: Invalid input (e.g., validation error, categoryId not found).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Unprocessable Entity (e.g., business rule violation like categoryId does not match transaction type).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        default:
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - OAuth2BearerAuth: [write:transactions]

  /transactions/{transactionId}:
    summary: Manage a specific transaction.
    parameters:
      - $ref: '#/components/parameters/TransactionID'
    get:
      summary: Get a transaction by its ID
      tags: [Transactions]
      operationId: getTransactionById
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'
        '401':
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Transaction not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        default:
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - OAuth2BearerAuth: [read:transactions]
    put:
      summary: Update an existing transaction (replaces the entire resource)
      tags: [Transactions]
      operationId: updateTransaction
      requestBody:
        description: Transaction object to update. All fields required for replacement.
        required: true
        content:
          application/json:
            schema: # Using TransactionCreateRequest as PUT implies providing all required fields for a new state
              $ref: '#/components/schemas/TransactionCreateRequest' # Or a specific TransactionReplaceRequest if fields differ
      responses:
        '200':
          description: Transaction updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'
        '400':
          description: Invalid input.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Transaction not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Unprocessable Entity.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        default:
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - OAuth2BearerAuth: [write:transactions]
    patch:
      summary: Partially update an existing transaction
      tags: [Transactions]
      operationId: patchTransaction
      requestBody:
        description: Transaction fields to update.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransactionUpdateRequest'
      responses:
        '200':
          description: Transaction partially updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'
        '400':
          description: Invalid input for patch operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Transaction not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Unprocessable Entity.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        default:
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - OAuth2BearerAuth: [write:transactions]
    delete:
      summary: Delete a transaction by its ID
      tags: [Transactions]
      operationId: deleteTransaction
      responses:
        '204':
          description: Transaction deleted successfully. No content.
        '401':
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Transaction not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        default:
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - OAuth2BearerAuth: [write:transactions]

  /transaction-categories:
    summary: Manage transaction categories.
    get:
      summary: List all transaction categories
      tags: [Categories]
      operationId: listTransactionCategories
      parameters:
        - name: classification
          in: query
          description: Filter categories by classification (income or expense).
          required: false
          schema:
            type: string
            enum: [income, expense]
        - $ref: '#/components/parameters/PageLimit'
        - $ref: '#/components/parameters/PageOffset'
      responses:
        '200':
          description: A paginated list of transaction categories.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedCategoriesResponse'
        '400':
          description: Invalid filter parameters.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        default:
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - OAuth2BearerAuth: [read:categories]
    post:
      summary: Create a new transaction category
      tags: [Categories]
      operationId: createTransactionCategory
      requestBody:
        description: Transaction category object to be created.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransactionCategoryCreateRequest'
      responses:
        '201':
          description: Transaction category created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionCategory'
          headers:
            Location:
              description: URL of the newly created category.
              schema:
                type: string
                format: url
        '400':
          description: Invalid input (e.g., validation error).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Conflict (e.g., category name already exists for the given classification).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        default:
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - OAuth2BearerAuth: [write:categories]

  /transaction-categories/{categoryId}:
    summary: Manage a specific transaction category.
    parameters:
      - $ref: '#/components/parameters/CategoryID'
    get:
      summary: Get a transaction category by its ID
      tags: [Categories]
      operationId: getTransactionCategoryById
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionCategory'
        '401':
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Transaction category not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        default:
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - OAuth2BearerAuth: [read:categories]
    put:
      summary: Update an existing transaction category (replaces the entire resource)
      tags: [Categories]
      operationId: updateTransactionCategory
      requestBody:
        description: Transaction category object to update.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransactionCategoryCreateRequest' # All fields required for replacement
      responses:
        '200':
          description: Transaction category updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionCategory'
        '400':
          description: Invalid input.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Transaction category not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Conflict (e.g., category name already exists for the given classification).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        default:
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - OAuth2BearerAuth: [write:categories]
    patch:
      summary: Partially update an existing transaction category
      tags: [Categories]
      operationId: patchTransactionCategory
      requestBody:
        description: Transaction category fields to update.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransactionCategoryUpdateRequest'
      responses:
        '200':
          description: Transaction category partially updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionCategory'
        '400':
          description: Invalid input for patch operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Transaction category not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Conflict (e.g., category name already exists for the given classification).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        default:
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - OAuth2BearerAuth: [write:categories]
    delete:
      summary: Delete a transaction category by its ID
      tags: [Categories]
      operationId: deleteTransactionCategory
      responses:
        '204':
          description: Transaction category deleted successfully. No content.
        '401':
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Transaction category not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Conflict (e.g., category is in use by transactions and cannot be deleted).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        default:
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - OAuth2BearerAuth: [write:categories]

  /properties:
    summary: Manage properties.
    get:
      summary: List all properties
      tags: [Properties]
      operationId: listProperties
      parameters:
        - $ref: '#/components/parameters/PageLimit'
        - $ref: '#/components/parameters/PageOffset'
      responses:
        '200':
          description: A paginated list of properties.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedPropertiesResponse'
        '401':
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        default:
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - OAuth2BearerAuth: [read:properties]
    post:
      summary: Create a new property
      tags: [Properties]
      operationId: createProperty
      requestBody:
        description: Property object to be created.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PropertyCreateRequest'
      responses:
        '201':
          description: Property created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Property'
          headers:
            Location:
              description: URL of the newly created property.
              schema:
                type: string
                format: url
        '400':
          description: Invalid input.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        default:
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - OAuth2BearerAuth: [write:properties]

  /properties/{propertyId}:
    summary: Manage a specific property.
    parameters:
      - $ref: '#/components/parameters/PropertyID'
    get:
      summary: Get a property by its ID
      tags: [Properties]
      operationId: getPropertyById
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Property'
        '401':
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Property not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        default:
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - OAuth2BearerAuth: [read:properties]
    put:
      summary: Update an existing property (replaces the entire resource)
      tags: [Properties]
      operationId: updateProperty
      requestBody:
        description: Property object to update.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PropertyCreateRequest' # All fields required for replacement
      responses:
        '200':
          description: Property updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Property'
        '400':
          description: Invalid input.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Property not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        default:
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - OAuth2BearerAuth: [write:properties]
    patch:
      summary: Partially update an existing property
      tags: [Properties]
      operationId: patchProperty
      requestBody:
        description: Property fields to update.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PropertyUpdateRequest'
      responses:
        '200':
          description: Property partially updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Property'
        '400':
          description: Invalid input for patch operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Property not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        default:
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - OAuth2BearerAuth: [write:properties]
    delete:
      summary: Delete a property by its ID
      tags: [Properties]
      operationId: deleteProperty
      responses:
        '204':
          description: Property deleted successfully. No content.
        '401':
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Property not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Conflict (e.g., property has associated transactions and cannot be deleted).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        default:
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - OAuth2BearerAuth: [write:properties]

tags:
  - name: Transactions
    description: Operations related to financial transactions.
  - name: Categories
    description: Operations related to transaction categories (e.g., income types, expense types).
  - name: Properties
    description: Operations related to properties (e.g., real estate assets).